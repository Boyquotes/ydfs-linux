diff -ur ../nss-3.42.1/nss/Makefile nss/Makefile
--- ../nss-3.42.1/nss/Makefile	2019-01-31 18:41:49.000000000 +0100
+++ nss/Makefile	2019-03-23 08:28:15.438829110 +0100
@@ -47,7 +47,7 @@
 # (7) Execute "local" rules. (OPTIONAL).                              #
 #######################################################################
 
-nss_build_all: build_nspr all latest
+nss_build_all: all latest
 
 nss_clean_all: clobber_nspr clobber
 
Only in nss: config
diff -ur ../nss-3.42.1/nss/coreconf/Linux.mk nss/coreconf/Linux.mk
--- ../nss-3.42.1/nss/coreconf/Linux.mk	2019-01-31 18:41:49.000000000 +0100
+++ nss/coreconf/Linux.mk	2019-03-23 08:28:15.466827865 +0100
@@ -3,10 +3,6 @@
 # License, v. 2.0. If a copy of the MPL was not distributed with this
 # file, You can obtain one at http://mozilla.org/MPL/2.0/.
 
-CC     ?= gcc
-CCC    ?= g++
-RANLIB ?= ranlib
-
 include $(CORE_DEPTH)/coreconf/UNIX.mk
 
 #
@@ -20,35 +16,32 @@
 	IMPL_STRATEGY = _PTH
 endif
 
-DEFAULT_COMPILER = gcc
+CC			= gcc
+CCC			= g++
+RANLIB			= ranlib
 
+DEFAULT_COMPILER = gcc
 ifeq ($(OS_TARGET),Android)
 ifndef ANDROID_NDK
 	$(error Must set ANDROID_NDK to the path to the android NDK first)
 endif
-ifndef ANDROID_TOOLCHAIN_VERSION
-	$(error Must set ANDROID_TOOLCHAIN_VERSION to the requested version number)
-endif
 	ANDROID_PREFIX=$(OS_TEST)-linux-androideabi
-	ANDROID_TARGET=$(ANDROID_PREFIX)-$(ANDROID_TOOLCHAIN_VERSION)
+	ANDROID_TARGET=$(ANDROID_PREFIX)-4.4.3
 	# should autodetect which linux we are on, currently android only
 	# supports linux-x86 prebuilts
 	ANDROID_TOOLCHAIN=$(ANDROID_NDK)/toolchains/$(ANDROID_TARGET)/prebuilt/linux-x86
 	ANDROID_SYSROOT=$(ANDROID_NDK)/platforms/android-$(OS_TARGET_RELEASE)/arch-$(OS_TEST)
 	ANDROID_CC=$(ANDROID_TOOLCHAIN)/bin/$(ANDROID_PREFIX)-gcc
-	ANDROID_CCC=$(ANDROID_TOOLCHAIN)/bin/$(ANDROID_PREFIX)-g++
-        NSS_DISABLE_GTESTS=1
 # internal tools need to be built with the native compiler
 ifndef INTERNAL_TOOLS
 	CC = $(ANDROID_CC) --sysroot=$(ANDROID_SYSROOT)
-	CCC = $(ANDROID_CCC) --sysroot=$(ANDROID_SYSROOT)
 	DEFAULT_COMPILER=$(ANDROID_PREFIX)-gcc
 	ARCHFLAG = --sysroot=$(ANDROID_SYSROOT)
 	DEFINES += -DNO_SYSINFO -DNO_FORK_CHECK -DANDROID
 	CROSS_COMPILE = 1
 endif
 endif
-ifeq (,$(filter-out ppc64 ppc64le,$(OS_TEST)))
+ifeq ($(OS_TEST),ppc64)
 	CPU_ARCH	= ppc
 ifeq ($(USE_64),1)
 	ARCHFLAG	= -m64
@@ -61,18 +54,11 @@
 ifeq ($(OS_TEST),x86_64)
 ifeq ($(USE_64),1)
 	CPU_ARCH	= x86_64
-	ARCHFLAG	= -m64
-else
-ifeq ($(USE_X32),1)
-	CPU_ARCH	= x86_64
-	ARCHFLAG	= -mx32
-	64BIT_TAG	= _x32
 else
 	OS_REL_CFLAGS	= -Di386
 	CPU_ARCH	= x86
 	ARCHFLAG	= -m32
 endif
-endif
 else
 ifeq ($(OS_TEST),sparc64)
 	CPU_ARCH        = sparc
@@ -106,6 +92,16 @@
 LIBC_TAG		= _glibc
 endif
 
+ifeq ($(OS_RELEASE),2.0)
+	OS_REL_CFLAGS	+= -DLINUX2_0
+	MKSHLIB		= $(CC) -shared -Wl,-soname -Wl,$(@:$(OBJDIR)/%.so=%.so) $(RPATH)
+	ifdef MAPFILE
+		MKSHLIB += -Wl,--version-script,$(MAPFILE)
+	endif
+	PROCESS_MAP_FILE = grep -v ';-' $< | \
+         sed -e 's,;+,,' -e 's; DATA ;;' -e 's,;;,,' -e 's,;.*,;,' > $@
+endif
+
 ifdef BUILD_OPT
 ifeq (11,$(ALLOW_OPT_CODE_SIZE)$(OPT_CODE_SIZE))
 	OPTIMIZER = -Os
@@ -121,34 +117,33 @@
 endif
 endif
 
-ifndef COMPILER_TAG
-COMPILER_TAG := _$(CC_NAME)
-endif
 
 ifeq ($(USE_PTHREADS),1)
 OS_PTHREAD = -lpthread 
 endif
 
-OS_CFLAGS		= $(DSO_CFLAGS) $(OS_REL_CFLAGS) $(ARCHFLAG) -pipe -ffunction-sections -fdata-sections -DHAVE_STRERROR
-ifeq ($(KERNEL),Linux)
-	OS_CFLAGS	+= -DLINUX -Dlinux
-endif
+# See bug 537829, in particular comment 23.
+# Place -ansi and *_SOURCE before $(DSO_CFLAGS) so DSO_CFLAGS can override
+# -ansi on platforms like Android where the system headers are C99 and do
+# not build with -ansi.
+STANDARDS_CFLAGS	= -D_POSIX_SOURCE -D_BSD_SOURCE -D_XOPEN_SOURCE
+OS_CFLAGS		= -I$(HOME)/$(DIBAB_ARCH)/include/ -I/$(HOME)/$(DIBAB_ARCH)/include/nspr/ $(STANDARDS_CFLAGS) $(DSO_CFLAGS) $(OS_REL_CFLAGS) $(ARCHFLAG) -Wall -Werror-implicit-function-declaration -Wno-switch -pipe -DLINUX -Dlinux -DHAVE_STRERROR
 OS_LIBS			= $(OS_PTHREAD) -ldl -lc
 
 ifdef USE_PTHREADS
 	DEFINES		+= -D_REENTRANT
 endif
 
+ARCH			= linux
+
 DSO_CFLAGS		= -fPIC
-DSO_LDOPTS		= -shared $(ARCHFLAG) -Wl,--gc-sections
+DSO_LDOPTS		= -shared $(ARCHFLAG)
 # The linker on Red Hat Linux 7.2 and RHEL 2.1 (GNU ld version 2.11.90.0.8)
 # incorrectly reports undefined references in the libraries we link with, so
 # we don't use -z defs there.
-# Also, -z defs conflicts with Address Sanitizer, which emits relocations
-# against the libsanitizer runtime built into the main executable.
-ZDEFS_FLAG		= -Wl,-z,defs
+ZDEFS_FLAG		= -Wl,-z,defs -L$(HOME)/$(DIBAB_ARCH)/lib
 DSO_LDOPTS		+= $(if $(findstring 2.11.90.0.8,$(shell ld -v)),,$(ZDEFS_FLAG))
-LDFLAGS			+= $(ARCHFLAG) -z noexecstack
+LDFLAGS			+= $(ARCHFLAG)
 
 # On Maemo, we need to use the -rpath-link flag for even the standard system
 # library directories.
@@ -156,6 +151,7 @@
 LDFLAGS			+= -Wl,-rpath-link,/usr/lib:/lib
 endif
 
+# INCLUDES += -I/usr/include -Y/usr/include/linux
 G++INCLUDES		= -I/usr/include/g++
 
 #
@@ -190,6 +186,7 @@
 endif
 endif
 
+OS_REL_CFLAGS   += -DLINUX2_1
 MKSHLIB         = $(CC) $(DSO_LDOPTS) -Wl,-soname -Wl,$(@:$(OBJDIR)/%.so=%.so) $(RPATH)
 
 ifdef MAPFILE
@@ -202,8 +199,3 @@
 DEFINES += -DNO_FORK_CHECK
 endif
 
-ifdef USE_GCOV
-OS_CFLAGS += --coverage
-LDFLAGS += --coverage
-DSO_LDOPTS += --coverage
-endif
diff -ur ../nss-3.42.1/nss/manifest.mn nss/manifest.mn
--- ../nss-3.42.1/nss/manifest.mn	2019-01-31 18:41:49.000000000 +0100
+++ nss/manifest.mn	2019-03-23 08:28:15.446828754 +0100
@@ -10,4 +10,4 @@
 
 RELEASE = nss
 
-DIRS = coreconf lib cmd cpputil gtests
+DIRS = coreconf lib cmd cpputil gtests config
