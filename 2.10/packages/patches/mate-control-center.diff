diff --git a/meson.build b/meson.build
index 9c09c32..8528710 100644
--- a/meson.build
+++ b/meson.build
@@ -116,7 +116,8 @@ elif enable_libappindicator == 'auto'
     appindicator = true
     ayatana = false
   else
-    error ('Neither Ayatana AppIndicator nor Ubuntu AppIndicator library is present, but you enabled AppIndicator support.')
+    appindicator = false
+    ayatana = false
   endif
 else
   appindicator = false
diff --git a/typing-break/drwright.c b/typing-break/drwright.c
index 8230611..1fb370f 100644
--- a/typing-break/drwright.c
+++ b/typing-break/drwright.c
@@ -30,12 +30,6 @@
 #include <gtk/gtk.h>
 #include <gio/gio.h>
 
-#ifdef HAVE_UBUNTU_APPINDICATOR
-#include <libappindicator/app-indicator.h>
-#else
-#include <libayatana-appindicator/app-indicator.h>
-#endif
-
 #define MATE_DESKTOP_USE_UNSTABLE_API
 #include <libmate-desktop/mate-desktop-utils.h>
 
@@ -83,7 +77,6 @@ struct _DrWright {
 	gboolean         enabled;
 
 	guint            clock_timeout_id;
-	AppIndicator    *indicator;
 	GtkWidget      *warn_dialog;
 };
 
@@ -109,7 +102,6 @@ static void     popup_preferences_cb           (GSimpleAction  *action,
 static void     popup_about_cb                 (GSimpleAction  *action,
                                                 GVariant       *parameter,
                                                 gpointer        data);
-static void     init_app_indicator             (DrWright       *dr);
 static GList *  create_secondary_break_windows (void);
 
 static const GActionEntry action_entries[] = {
@@ -128,30 +120,6 @@ setup_debug_values (DrWright *dr)
 	dr->break_time = 10;
 }
 
-static void
-update_app_indicator (DrWright *dr)
-{
-	AppIndicatorStatus new_status;
-
-	if (!dr->enabled) {
-		app_indicator_set_status (dr->indicator,
-					  APP_INDICATOR_STATUS_PASSIVE);
-		return;
-	}
-
-	switch (dr->state) {
-	case STATE_WARN:
-	case STATE_BREAK_SETUP:
-	case STATE_BREAK:
-		new_status = APP_INDICATOR_STATUS_ATTENTION;
-		break;
-	default:
-		new_status = APP_INDICATOR_STATUS_ACTIVE;
-	}
-
-	app_indicator_set_status (dr->indicator, new_status);
-}
-
 static gboolean
 grab_keyboard_on_window (GdkWindow *window,
 			 guint32    activate_time)
@@ -303,8 +271,6 @@ maybe_change_state (DrWright *dr)
 
 	dr->last_elapsed_time = elapsed_time;
 
-	update_app_indicator (dr);
-
 	return TRUE;
 }
 
@@ -314,12 +280,6 @@ update_status (DrWright *dr)
 	gint       min;
 	gchar     *str;
 
-	if (!dr->enabled) {
-		app_indicator_set_status (dr->indicator,
-					  APP_INDICATOR_STATUS_PASSIVE);
-		return TRUE;
-	}
-
 	min = get_time_left (dr);
 
 	if (min >= 1) {
@@ -484,7 +444,6 @@ break_window_postpone_cb (GtkWidget *window,
 	drw_timer_start (dr->timer);
 	maybe_change_state (dr);
 	update_status (dr);
-	update_app_indicator (dr);
 }
 
 static void
@@ -501,29 +460,6 @@ break_window_destroy_cb (GtkWidget *window,
 	dr->secondary_break_windows = NULL;
 }
 
-static void
-init_app_indicator (DrWright *dr)
-{
-	dr->indicator =
-		app_indicator_new_with_path ("typing-break-indicator",
-					     TYPING_MONITOR_ACTIVE_ICON,
-					     APP_INDICATOR_CATEGORY_APPLICATION_STATUS,
-					     IMAGEDIR);
-	if (dr->enabled) {
-		app_indicator_set_status (dr->indicator,
-					  APP_INDICATOR_STATUS_ACTIVE);
-	} else {
-		app_indicator_set_status (dr->indicator,
-					  APP_INDICATOR_STATUS_PASSIVE);
-	}
-
-	app_indicator_set_menu (dr->indicator, GTK_MENU (dr->menu));
-	app_indicator_set_attention_icon (dr->indicator, TYPING_MONITOR_ATTENTION_ICON);
-
-	update_status (dr);
-	update_app_indicator (dr);
-}
-
 static GList *
 create_secondary_break_windows (void)
 {
@@ -662,8 +598,6 @@ drwright_new (void)
 			  G_CALLBACK (activity_detected_cb),
 			  dr);
 
-	init_app_indicator (dr);
-
 	g_timeout_add_seconds (12,
 			       (GSourceFunc) update_status,
 			       dr);
