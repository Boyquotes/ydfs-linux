#!/bin/sh
. ./config.ini

install -d /$HOME//src/
install -d /$HOME//tarballs/
install -d /$HOME//build/
cd /$HOME/
if [ "$SUBCARCH" = "raspi" ]
then
  echo $SUBCARCH
  install -d $HOME//build/linux-$CARCH-"$KERNEL3"
  BUILD_DIR=$HOME//build/linux-$CARCH-"$KERNEL3"
  [ ! -e tarballs/$KERNEL3.zip ] && wget --directory-prefix=tarballs https://github.com/raspberrypi/linux/archive/$KERNEL3.zip
  [ ! -e src/linux-$KERNEL3 ] && unzip tarballs/$KERNEL3.zip -d src
  cd src/linux-$KERNEL3
  [ ! -e $BUILD_DIR/.config ] && cp /$HOME_DIBAB/config/kernel-raspi/config  $BUILD_DIR/.config
  [ "$MENUCONFIG" = "YES" ] && echo "make menuconfig" && make menuconfig O=$BUILD_DIR && cp $BUILD_DIR/.config /$HOME_DIBAB/config/kernel-raspi/config
  echo "make kernel"
  make O=$BUILD_DIR -k -j5 
  exit $?
#  make modules  O=$BUILD_DIR || exit 1
fi

if [ "$ALT_KERNEL" = "FriendlyARM" ]
then
  if [ ! -e tarballs/linux-2.6.32.2-mini2440_20110305.tgz ]
  then
    wget --directory-prefix=tarballs http://jukebox.linuxconsole.org/mini2440/linux-2.6.32.2-mini2440_20110305.tgz
  fi
  [ ! -e src/linux-"$KERNEL3" ] && tar xzvf tarballs/linux-2.6.32.2-mini2440_20110305.tgz  --directory=src 
else
  if [ ! -e tarballs/linux-"$KERNEL3".tar.xz ]
  then
    wget --directory-prefix=tarballs https://www.kernel.org/pub/linux/kernel/v4.x/linux-"$KERNEL3".tar.xz || wget --directory-prefix=tarballs ftp://ftp.free.fr/mirrors/ftp.kernel.org/linux/kernel/v4.x/linux-"$KERNEL3".tar.xz
  fi
fi

if [ ! -e src/linux-"$KERNEL3" ]
then
  tar xJvf tarballs/linux-"$KERNEL3".tar.xz  --directory=src || exit 1
fi

[ ! -e src/linux-"$KERNEL3" ] && exit 1

cd src/linux-"$KERNEL3"

grep SND_DYNAMIC_MINORS sound/pci/hda/Kconfig && sed -i "s@select SND_DYNAMIC_MINORS@@" sound/pci/hda/Kconfig
grep SND_DYNAMIC_MINORS sound/pci/hda/Kconfig && exit 1

if [ ! -e aufs4-kbuild.patch.ok ]
then
  echo "Aufs patch ..."
  KERNEL_MAJOR=`echo $KERNEL3|cut -d'.' -f1,2`
  [ "$KERNEL_MAJOR" = "3.14" ] && KERNEL_MAJOR="3.14.21+" && echo "Using $KERNEL_MAJOR patches" && sleep 10
  [ "$KERNEL_MAJOR" = "3.18" ] && KERNEL_MAJOR="3.18.1+" && echo "Using $KERNEL_MAJOR patches" && sleep 10
  # echo $KERNEL3 | grep 2.6.32 && KERNEL_MAJOR=2.6
  git clone git://github.com/sfjro/aufs4-standalone.git aufs-aufs4-standalone || exit 2
  cd aufs-aufs4-standalone || exit 3
# git branch -a
  git checkout origin/aufs$KERNEL_MAJOR || exit 4
#  echo "Press a key" && read key  
  cd ..
  PATCHES="aufs4-kbuild.patch aufs4-base.patch aufs4-mmap.patch"
  #[ "$KERNEL_MAJOR" = "3.14" ] && PATCHES="aufs4-kbuild.patch aufs4-base.patch"
  for PATCH in $PATCHES
  do
    [ ! -e "$PATCH".ok ] && [ -e aufs-aufs4-standalone/"$PATCH" ] && patch -p1 < aufs-aufs4-standalone/$PATCH && sleep 3 && touch "$PATCH".ok
  done
  for SUBDIR in Documentation fs include
  do 
    cp -fR aufs-aufs4-standalone/$SUBDIR/* $SUBDIR
  done
  grep 'nr = 255' drivers/block/loop.c || sed -i "s@nr = 8;@nr = 255;@" drivers/block/loop.c
fi

if [ "$SUBCARCH" = "raspi-qemu" ] && [ ! -e linux-raspi-qemu-arm.patch.ok ]
then
    # wget http://xecdesign.com/downloads/linux-qemu/linux-arm.patch
    patch -p1 < $HOME_DIBAB/packages/patches/linux-raspi-qemu-arm.patch || exit 1
    touch linux-raspi-qemu-arm.patch.ok || exit 1
fi

if [ "$CARCH" = "arm" ] && [ "$ALT_KERNEL" != "FriendlyARM" ] &&  [ ! -e patch-mini2440-ok ]
then
  patch -p1 < $HOME_DIBAB/packages/patches/mini2440-new-new/linux-0001-mini2440-Add-support-for-new-LCD-panels.patch || patch -p1 < $HOME_DIBAB/packages/patches/mini2440-new/linux-0001-mini2440-Add-support-for-new-LCD-panels.patch
  patch -p1 < $HOME_DIBAB/packages/patches/mini2440-new-new/linux-0002-mini2440-Add-touchscreen-support-for-mini244.patch || patch -p1 < $HOME_DIBAB/packages/patches/mini2440-new/linux-0002-mini2440-Add-touchscreen-support-for-mini244.patch 
  patch -p1 < $HOME_DIBAB/packages/patches/mini2440-new-new/linux-0003-mini2440-Select-touchscreen-by-default.patch 
#  patch -p1 < $HOME_DIBAB/packages/patches/mini2440-new-new/linux-0004-mini2440-Enable-the-backlight-LED-earlier-at.patch
  patch -p1 < $HOME_DIBAB/packages/patches/mini2440-new-new/linux-0005-mini2440-Add-support-for-new-LCD-W35.patch || patch -p1 < $HOME_DIBAB/packages/patches/mini2440-new/linux-0005-mini2440-Add-support-for-new-LCD-W35.patch ||Â exit 1
  touch patch-mini2440-ok
fi

# fixes for mini2440
[ "$CARCH" = "arm" ] && [ -e drivers/tty/serial/samsung.c ] && grep "EXPORT_SYMBOL_GPL(s3c24xx_serial_remove);" drivers/tty/serial/samsung.c &&  sed -i "s@EXPORT_SYMBOL_GPL(s3c24xx_serial_remove);@@" drivers/tty/serial/samsung.c
[ "$CARCH" = "arm" ] && [ -e drivers/serial/samsung.c ] && grep "EXPORT_SYMBOL_GPL(s3c24xx_serial_remove);" drivers/serial/samsung.c &&  sed -i "s@EXPORT_SYMBOL_GPL(s3c24xx_serial_remove);@@" drivers/serial/samsung.c

install -d $HOME//build/linux-$CARCH-"$KERNEL3"
BUILD_DIR=$HOME//build/linux-$CARCH-"$KERNEL3"
#BUILD_DIR=.

[ "$SUBCARCH" = "raspi-qemu" ] && [ ! -e $BUILD_DIR/.config ] && cp $HOME_DIBAB/config/kernel-raspi-qemu/config  $BUILD_DIR/.config

if [ ! -e $BUILD_DIR/.config ] 
then
  if [ -e /$HOME_DIBAB/config/kernel-$CARCH/linux-"$KERNEL3"/.config ] 
  then
   echo "Get "/$HOME_DIBAB/config/kernel-$CARCH/linux-"$KERNEL3"/.config
   cp /$HOME_DIBAB/config/kernel-$CARCH/linux-"$KERNEL3"/.config $BUILD_DIR/.config
  else
   echo "Get "/$HOME_DIBAB/config/kernel-$CARCH/config
   cp /$HOME_DIBAB/config/kernel-$CARCH/config $BUILD_DIR/.config
   [ $? != 0 ] && [ "$MENUCONFIG" != "YES" ] && exit 1
   fi
fi

[ "$MENUCONFIG" = "YES" ] && make menuconfig O=$BUILD_DIR
  install -d $HOME_DIBAB/config/kernel-$CARCH/linux-"$KERNEL3"/
  DATE=`date +"%Y_%m_%d"`
  cp $BUILD_DIR/.config  /$HOME_DIBAB/config/kernel-$CARCH/linux-"$KERNEL3"/.config.$DATE
git add /$HOME_DIBAB/config/kernel-$CARCH/linux-"$KERNEL3"/
  cp $BUILD_DIR/.config  /$HOME_DIBAB/config/kernel-$CARCH/linux-"$KERNEL3"/
  [ "$CARCH" != "arm" ] && cp $BUILD_DIR/.config  /$HOME_DIBAB/config/kernel-$CARCH/config
[ "$SUBCARCH" = "raspi-qemu" ] && cp $BUILD_DIR/.config $HOME_DIBAB/config/kernel-raspi-qemu/config
  # cp $HOME_DIBAB/config/initramfs-$CARCH.txt $BUILD_DIR 

  make bzImage O=$BUILD_DIR || exit 1
#   make bzImage CONFIG_DEBUG_SECTION_MISMATCH=y O=$BUILD_DIR || exit 1
# echo "Bzimage ok, press a key"
#  make mrproper
  grep '# CONFIG_MODULES is not set' $BUILD_DIR/.config
  if [ $? != 0 ]
  then
    make modules O=$BUILD_DIR || exit 0
    make modules_install O=$BUILD_DIR INSTALL_MOD_PATH=$HOME//kernel-$CARCH/modules/$KERNEL3 || exit 1
    /sbin/depmod -b $HOME//kernel-$CARCH/modules/$KERNEL3 -m $KERNEL3
#    [ ! -e $HOME//kernel-$CARCH/modules/$KERNEL3/lib/modules/$KERNEL3/modules.pcimap ] && echo "modules.pcimap not found " && exit 1
    [ ! -e $HOME//kernel-$CARCH/modules/$KERNEL3/lib/modules/$KERNEL3/modules.dep ] && echo "$HOME//kernel-$CARCH/modules/$KERNEL3/modules.dep not found" && exit 2
  fi
  echo buildt
