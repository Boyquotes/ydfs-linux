#!/bin/sh

mkdir /tmp

#install -d $HOME/$ARCH

install -d //modules/$ARCH

mount /media//modules/$ARCH.squashfs //modules/$ARCH || ash

install -d /lib/modules
mount /media//modules/drivers-$ARCH.squashfs /lib/modules
install -d /lib/firmware
mount /media//modules/firmware-$ARCH.squashfs /lib/firmware

#ls /media/modules/ | while read MODULE
#do
#  [ "$MODULE" = "$ARCH.squashfs" ] && continue 
#  [ "$MODULE" = "drivers-$ARCH.squashfs" ] && continue 
#  [ "$MODULE" = "firmware-$ARCH.squashfs" ] && continue 
#  MODULE_NAME=`echo $MODULE|cut -d'.' -f1`
#  install -d //modules/$MODULE_NAME
#  mount /media/modules/$MODULE //modules/$MODULE_NAME
#  ln -s //modules/$MODULE_NAME
#  MODULE_LIST="$MODULE_LIST://modules/$MODULE_NAME"
#done

cp -fR //modules/$ARCH/var /

//start/restore-persistant-data

if [ -e /media//mount-myusr ] 
then
  /media//mount-myusr
else
  mkdir /usr
  ln -s /usr $HOME/$ARCH
fi

#sachant que -name est créé par le fichier 
#scripts/make_initramfs et la commande:echo "$DISTRONAME" > $INITRAMFS/-name
#et la variable DISTRONAME est définie dans config.ini (attention,vérifier ce fichier,car cette variable peut-être restée à "linuxconsole")
MODULE=`cat /-name`
if [ -e /media//modules/$MODULE-$ARCH.squashfs ] && [ ! -e //modules/module ]
then
 echo " $MODULE "
 install -d //modules/$MODULE
 ln -s //modules/$MODULE $HOME
 ln -s //modules/$MODULE //modules/module
 mount /media//modules/$MODULE-$ARCH.squashfs //modules/$MODULE
 if [ -e /root/usr ]
 then
   USR=/root/usr
   [ -e //modules/$MODULE/usr ] && USR=/root/usr://modules/$MODULE/usr
   #aufs permet de fusionner plusieurs points de montage
   mount -t aufs -o dirs=$USR://modules/$ARCH aufs /usr || ash
   export PATH=$HOME/$MODULE/bin:$HOME/$MODULE/usr/games:$PATH
   mount -t aufs -o dirs=/root/etc:/etc aufs /etc || ash
 else
   USR=/usr
   [ -e //modules/$MODULE/usr ] && USR=/usr://modules/$MODULE/usr
   mount -t aufs -o dirs=$USR://modules/$ARCH aufs /usr || ash
   export PATH=$HOME/$MODULE/bin:$PATH
 fi
 [ -e //modules/$MODULE/logo.png ] && cp //modules/$MODULE/logo.png /etc/.png
fi

if [ ! -e //modules/module ] # No module
then
 if [ -e /root/usr ]
 then
   mount -t aufs -o dirs=/root/usr://modules/$ARCH aufs /usr || ash
   export PATH=$HOME/$MODULE/bin:$HOME/$MODULE/usr/games:$PATH
   mount -t aufs -o dirs=/root/etc:/etc aufs /etc || ash
  else
   mount -t aufs -o dirs=/usr://modules/$ARCH aufs /usr || ash
  fi
  #MODULE=
fi

if [ ! -e /usr/lib/opkg ]
then
  install -d /etc/opkg
  install -d /usr/lib/opkg
  RELEASE=`cat /-release`
  if [ ! -e /etc/opkg/.conf ]
  then
    if [ -e /media//pkg ]
    then
      # local
      echo "src linuxconsole file:///media//pkg" > /etc/opkg/.conf
    else
      # Network
      # echo "src linuxconsole http://linuxconsole.linux-live-cd.org/$MODULE/$RELEASE/$ARCH" > /etc/opkg/.conf
      echo "src linuxconsole http://opkg.linuxconsole.org/$MODULE/$RELEASE/$ARCH" > /etc/opkg/.conf
    fi
  fi
fi
mount /var /usr/var -o bind


#ln -s $HOME/$ARCH /usr

ln -s /usr/lib/ld-linux.so.2 /lib 
ln -s /usr/lib /lib64


ln -s /busybox/sbin /

chmod u+s /usr/libexec/dbus-daemon-launch-helper

//start/syslog

#udevd --daemon --debug
if [ -e //boot/options/debug ]
then
  udevd --daemon --debug
else
  udevd --daemon
fi
  
dbus-daemon --system

mkdir /bin
ln -s /busybox/bin/ash /bin/sh
ln -s /lib/ld-linux.so.2 /lib/ld-lsb.so.3

for file in `ls /usr/etc`
do
	[ ! -e /etc/$file ] && ln -s /usr/etc/$file /etc/$file
done

if [ ! -e $HOME/$ARCH/etc/machine-id ]
then
  dbus-uuidgen > $HOME/$ARCH/etc/machine-id
fi

[ ! -e etc/machine-id ] && ln -s $HOME/$ARCH/etc/machine-id /etc

ln -s /usr/bin/bash /bin/bash

mkdir /dev/shm # Steam
mount tmpfs /dev/shm -t tmpfs -o 'defaults,noexec,nosuid,nodev'

install -d $HOME/var/log # Xorg log
install -d /var/run # Xorg optimus
